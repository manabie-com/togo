// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/task/handler.go

// Package task is a generated GoMock package.
package task

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// AssignTask mocks base method.
func (m *MockService) AssignTask(ctx context.Context, req *AssignTaskReq) (*Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignTask", ctx, req)
	ret0, _ := ret[0].(*Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignTask indicates an expected call of AssignTask.
func (mr *MockServiceMockRecorder) AssignTask(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignTask", reflect.TypeOf((*MockService)(nil).AssignTask), ctx, req)
}

// CountTasksOfUserToDay mocks base method.
func (m *MockService) CountTasksOfUserToDay(ctx context.Context, username string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountTasksOfUserToDay", ctx, username)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountTasksOfUserToDay indicates an expected call of CountTasksOfUserToDay.
func (mr *MockServiceMockRecorder) CountTasksOfUserToDay(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountTasksOfUserToDay", reflect.TypeOf((*MockService)(nil).CountTasksOfUserToDay), ctx, username)
}

// CreateTask mocks base method.
func (m *MockService) CreateTask(ctx context.Context, req *CreateTaskReq) (*Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", ctx, req)
	ret0, _ := ret[0].(*Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockServiceMockRecorder) CreateTask(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockService)(nil).CreateTask), ctx, req)
}

// Delete mocks base method.
func (m *MockService) Delete(ctx context.Context, req *DeleteTaskByIdReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockServiceMockRecorder) Delete(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockService)(nil).Delete), ctx, req)
}

// GetByID mocks base method.
func (m *MockService) GetByID(ctx context.Context, req *GetTaskByIdReq) (*Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, req)
	ret0, _ := ret[0].(*Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockServiceMockRecorder) GetByID(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockService)(nil).GetByID), ctx, req)
}

// ListTasks mocks base method.
func (m *MockService) ListTasks(ctx context.Context, req *ListTasksReq) ([]*Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTasks", ctx, req)
	ret0, _ := ret[0].([]*Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTasks indicates an expected call of ListTasks.
func (mr *MockServiceMockRecorder) ListTasks(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTasks", reflect.TypeOf((*MockService)(nil).ListTasks), ctx, req)
}
