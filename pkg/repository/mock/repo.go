// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/repository/repo.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "togo.com/pkg/model"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddTask mocks base method.
func (m *MockRepository) AddTask(ctx context.Context, addParams model.AddTaskParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTask", ctx, addParams)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTask indicates an expected call of AddTask.
func (mr *MockRepositoryMockRecorder) AddTask(ctx, addParams interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTask", reflect.TypeOf((*MockRepository)(nil).AddTask), ctx, addParams)
}

// CountTaskPerDay mocks base method.
func (m *MockRepository) CountTaskPerDay(ctx context.Context, userId, createDate string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountTaskPerDay", ctx, userId, createDate)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountTaskPerDay indicates an expected call of CountTaskPerDay.
func (mr *MockRepositoryMockRecorder) CountTaskPerDay(ctx, userId, createDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountTaskPerDay", reflect.TypeOf((*MockRepository)(nil).CountTaskPerDay), ctx, userId, createDate)
}

// GetLimitPerUser mocks base method.
func (m *MockRepository) GetLimitPerUser(ctx context.Context, userId string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLimitPerUser", ctx, userId)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLimitPerUser indicates an expected call of GetLimitPerUser.
func (mr *MockRepositoryMockRecorder) GetLimitPerUser(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLimitPerUser", reflect.TypeOf((*MockRepository)(nil).GetLimitPerUser), ctx, userId)
}

// GetUser mocks base method.
func (m *MockRepository) GetUser(ctx context.Context, req model.LoginRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, req)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockRepositoryMockRecorder) GetUser(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockRepository)(nil).GetUser), ctx, req)
}

// RetrieveTasks mocks base method.
func (m *MockRepository) RetrieveTasks(ctx context.Context, userId, createDate string) ([]model.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveTasks", ctx, userId, createDate)
	ret0, _ := ret[0].([]model.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveTasks indicates an expected call of RetrieveTasks.
func (mr *MockRepositoryMockRecorder) RetrieveTasks(ctx, userId, createDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveTasks", reflect.TypeOf((*MockRepository)(nil).RetrieveTasks), ctx, userId, createDate)
}
