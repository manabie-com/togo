// Code generated by sqlc. DO NOT EDIT.
// source: tasks.sql

package postgresql

import (
	"context"
	"time"
)

const countTaskByUser = `-- name: CountTaskByUser :one
SELECT COUNT(id)
FROM tasks
WHERE user_id = $1
  AND created_date = CURRENT_DATE
`

func (q *Queries) CountTaskByUser(ctx context.Context, userID int32) (int64, error) {
	row := q.db.QueryRowContext(ctx, countTaskByUser, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE
FROM tasks
WHERE id = $1
  AND user_id = $2
`

type DeleteTaskParams struct {
	ID     int32 `json:"id"`
	UserID int32 `json:"user_id"`
}

func (q *Queries) DeleteTask(ctx context.Context, arg DeleteTaskParams) error {
	_, err := q.db.ExecContext(ctx, deleteTask, arg.ID, arg.UserID)
	return err
}

const getTask = `-- name: GetTask :one
SELECT id, content, user_id, created_date, is_done, created_at, updated_at
FROM tasks
WHERE id = $1
  AND user_id = $2
LIMIT 1
`

type GetTaskParams struct {
	ID     int32 `json:"id"`
	UserID int32 `json:"user_id"`
}

func (q *Queries) GetTask(ctx context.Context, arg GetTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, getTask, arg.ID, arg.UserID)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.UserID,
		&i.CreatedDate,
		&i.IsDone,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertTask = `-- name: InsertTask :one
INSERT INTO tasks (content, user_id, created_date)
VALUES ($1, $2, $3)
RETURNING id, content, user_id, created_date, is_done, created_at, updated_at
`

type InsertTaskParams struct {
	Content     string    `json:"content"`
	UserID      int32     `json:"user_id"`
	CreatedDate time.Time `json:"created_date"`
}

func (q *Queries) InsertTask(ctx context.Context, arg InsertTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, insertTask, arg.Content, arg.UserID, arg.CreatedDate)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.UserID,
		&i.CreatedDate,
		&i.IsDone,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listTasks = `-- name: ListTasks :many
SELECT id, content, user_id, created_date, is_done, created_at, updated_at
FROM tasks
WHERE user_id = $1
  AND ($2::date = '0001-01-01' OR created_date = $2)
  AND (NOT $3::boolean OR is_done = $3)
ORDER BY id
`

type ListTasksParams struct {
	UserID      int32     `json:"user_id"`
	CreatedDate time.Time `json:"created_date"`
	IsDone      bool      `json:"is_done"`
}

func (q *Queries) ListTasks(ctx context.Context, arg ListTasksParams) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, listTasks, arg.UserID, arg.CreatedDate, arg.IsDone)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.UserID,
			&i.CreatedDate,
			&i.IsDone,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTask = `-- name: UpdateTask :exec
UPDATE tasks
SET is_done    = $2,
    updated_at = NOW()
WHERE id = $1
`

type UpdateTaskParams struct {
	ID     int32 `json:"id"`
	IsDone bool  `json:"is_done"`
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) error {
	_, err := q.db.ExecContext(ctx, updateTask, arg.ID, arg.IsDone)
	return err
}
