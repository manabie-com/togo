// Code generated by sqlc. DO NOT EDIT.
// source: tasks.sql

package postgres

import (
	"context"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (
  content,
  user_id,
  created_date
) VALUES (
  $1, $2, $3
)
RETURNING id, content, user_id, created_date
`

type CreateTaskParams struct {
	Content     string `json:"content"`
	UserID      string `json:"user_id"`
	CreatedDate string `json:"created_date"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createTask, arg.Content, arg.UserID, arg.CreatedDate)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.UserID,
		&i.CreatedDate,
	)
	return i, err
}

const retrieveTasks = `-- name: RetrieveTasks :many
SELECT id, content, user_id, created_date FROM tasks
WHERE user_id = $1 
AND created_date = $2
ORDER BY created_date
`

type RetrieveTasksParams struct {
	UserID      string `json:"user_id"`
	CreatedDate string `json:"created_date"`
}

func (q *Queries) RetrieveTasks(ctx context.Context, arg RetrieveTasksParams) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, retrieveTasks, arg.UserID, arg.CreatedDate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.UserID,
			&i.CreatedDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
