// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/manabie-com/togo/internal/app/task/usecase (interfaces: TaskStorage)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	model "github.com/manabie-com/togo/internal/app/task/model"
	reflect "reflect"
)

// MockTaskStorage is a mock of TaskStorage interface
type MockTaskStorage struct {
	ctrl     *gomock.Controller
	recorder *MockTaskStorageMockRecorder
}

// MockTaskStorageMockRecorder is the mock recorder for MockTaskStorage
type MockTaskStorageMockRecorder struct {
	mock *MockTaskStorage
}

// NewMockTaskStorage creates a new mock instance
func NewMockTaskStorage(ctrl *gomock.Controller) *MockTaskStorage {
	mock := &MockTaskStorage{ctrl: ctrl}
	mock.recorder = &MockTaskStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTaskStorage) EXPECT() *MockTaskStorageMockRecorder {
	return m.recorder
}

// AddTask mocks base method
func (m *MockTaskStorage) AddTask(arg0 context.Context, arg1 model.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTask", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTask indicates an expected call of AddTask
func (mr *MockTaskStorageMockRecorder) AddTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTask", reflect.TypeOf((*MockTaskStorage)(nil).AddTask), arg0, arg1)
}

// LimitReached mocks base method
func (m *MockTaskStorage) LimitReached(arg0 context.Context, arg1, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LimitReached", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LimitReached indicates an expected call of LimitReached
func (mr *MockTaskStorageMockRecorder) LimitReached(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LimitReached", reflect.TypeOf((*MockTaskStorage)(nil).LimitReached), arg0, arg1, arg2)
}

// RetrieveTasks mocks base method
func (m *MockTaskStorage) RetrieveTasks(arg0 context.Context, arg1, arg2 string) ([]model.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveTasks", arg0, arg1, arg2)
	ret0, _ := ret[0].([]model.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveTasks indicates an expected call of RetrieveTasks
func (mr *MockTaskStorageMockRecorder) RetrieveTasks(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveTasks", reflect.TypeOf((*MockTaskStorage)(nil).RetrieveTasks), arg0, arg1, arg2)
}
