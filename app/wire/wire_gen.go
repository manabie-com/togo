// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"ansidev.xyz/pkg/db"
	"ansidev.xyz/pkg/rds"
	"database/sql"
	repository2 "github.com/ansidev/togo/auth/repository"
	"github.com/ansidev/togo/auth/service"
	repository3 "github.com/ansidev/togo/task/repository"
	service2 "github.com/ansidev/togo/task/service"
	"github.com/ansidev/togo/user/repository"
	"github.com/go-redis/redis/v8"
	"gorm.io/gorm"
	"time"
)

// Injectors from wire.go:

func InitSqlClient(config db.SqlDbConfig) *sql.DB {
	sqlDB := db.NewPostgresClient(config)
	return sqlDB
}

func InitRedisClient(config rds.RedisConfig) *redis.Client {
	client := rds.NewRedisClient(config)
	return client
}

func InitAuthService(db2 *gorm.DB, rdb *rds.RedisDB, tokenTTL time.Duration) service.IAuthService {
	iUserRepository := repository.NewPostgresUserRepository(db2)
	iCredRepository := repository2.NewRedisCredentialRepository(rdb, tokenTTL)
	iAuthService := service.NewAuthService(iUserRepository, iCredRepository)
	return iAuthService
}

func InitTaskService(db2 *gorm.DB) service2.ITaskService {
	iUserRepository := repository.NewPostgresUserRepository(db2)
	iTaskRepository := repository3.NewPostgresTaskRepository(db2)
	iTaskService := service2.NewTaskService(iUserRepository, iTaskRepository)
	return iTaskService
}
