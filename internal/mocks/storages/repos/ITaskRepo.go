// Code generated by mockery 2.9.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	sql "database/sql"

	storages "github.com/manabie-com/togo/internal/storages"

	tools "github.com/manabie-com/togo/internal/tools"
)

// ITaskRepo is an autogenerated mock type for the ITaskRepo type
type ITaskRepo struct {
	mock.Mock
}

// AddTask provides a mock function with given fields: ctx, t
func (_m *ITaskRepo) AddTask(ctx context.Context, t *storages.Task) *tools.TodoError {
	ret := _m.Called(ctx, t)

	var r0 *tools.TodoError
	if rf, ok := ret.Get(0).(func(context.Context, *storages.Task) *tools.TodoError); ok {
		r0 = rf(ctx, t)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tools.TodoError)
		}
	}

	return r0
}

// RetrieveTasks provides a mock function with given fields: ctx, userID, createdDate
func (_m *ITaskRepo) RetrieveTasks(ctx context.Context, userID sql.NullString, createdDate sql.NullString) ([]*storages.Task, *tools.TodoError) {
	ret := _m.Called(ctx, userID, createdDate)

	var r0 []*storages.Task
	if rf, ok := ret.Get(0).(func(context.Context, sql.NullString, sql.NullString) []*storages.Task); ok {
		r0 = rf(ctx, userID, createdDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*storages.Task)
		}
	}

	var r1 *tools.TodoError
	if rf, ok := ret.Get(1).(func(context.Context, sql.NullString, sql.NullString) *tools.TodoError); ok {
		r1 = rf(ctx, userID, createdDate)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*tools.TodoError)
		}
	}

	return r0, r1
}
