// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "github.com/vchitai/togo/internal/models"

	time "time"
)

// ToDo is an autogenerated mock type for the ToDo type
type ToDo struct {
	mock.Mock
}

// DecreaseUsedCount provides a mock function with given fields: ctx, userID, day, by
func (_m *ToDo) DecreaseUsedCount(ctx context.Context, userID string, day time.Time, by int64) (int64, error) {
	ret := _m.Called(ctx, userID, day, by)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time, int64) int64); ok {
		r0 = rf(ctx, userID, day, by)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, time.Time, int64) error); ok {
		r1 = rf(ctx, userID, day, by)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfig provides a mock function with given fields: ctx, userID
func (_m *ToDo) GetConfig(ctx context.Context, userID string) (*models.ToDoConfig, error) {
	ret := _m.Called(ctx, userID)

	var r0 *models.ToDoConfig
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.ToDoConfig); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ToDoConfig)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsedCount provides a mock function with given fields: ctx, userID, day
func (_m *ToDo) GetUsedCount(ctx context.Context, userID string, day time.Time) (int64, error) {
	ret := _m.Called(ctx, userID, day)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) int64); ok {
		r0 = rf(ctx, userID, day)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, time.Time) error); ok {
		r1 = rf(ctx, userID, day)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncreaseUsedCount provides a mock function with given fields: ctx, userID, day, by
func (_m *ToDo) IncreaseUsedCount(ctx context.Context, userID string, day time.Time, by int64) (int64, error) {
	ret := _m.Called(ctx, userID, day, by)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time, int64) int64); ok {
		r0 = rf(ctx, userID, day, by)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, time.Time, int64) error); ok {
		r1 = rf(ctx, userID, day, by)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Record provides a mock function with given fields: ctx, list
func (_m *ToDo) Record(ctx context.Context, list []*models.ToDo) error {
	ret := _m.Called(ctx, list)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*models.ToDo) error); ok {
		r0 = rf(ctx, list)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
