// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/manabie-com/backend/services/user (interfaces: I_UserServiceValidate)

// Package mock_user is a generated GoMock package.
package mock_user

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	utils "github.com/manabie-com/backend/utils"
)

// MockI_UserServiceValidate is a mock of I_UserServiceValidate interface.
type MockI_UserServiceValidate struct {
	ctrl     *gomock.Controller
	recorder *MockI_UserServiceValidateMockRecorder
}

// MockI_UserServiceValidateMockRecorder is the mock recorder for MockI_UserServiceValidate.
type MockI_UserServiceValidateMockRecorder struct {
	mock *MockI_UserServiceValidate
}

// NewMockI_UserServiceValidate creates a new mock instance.
func NewMockI_UserServiceValidate(ctrl *gomock.Controller) *MockI_UserServiceValidate {
	mock := &MockI_UserServiceValidate{ctrl: ctrl}
	mock.recorder = &MockI_UserServiceValidateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockI_UserServiceValidate) EXPECT() *MockI_UserServiceValidateMockRecorder {
	return m.recorder
}

// IsAllowedAddTask mocks base method.
func (m *MockI_UserServiceValidate) IsAllowedAddTask() *utils.ErrorRest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAllowedAddTask")
	ret0, _ := ret[0].(*utils.ErrorRest)
	return ret0
}

// IsAllowedAddTask indicates an expected call of IsAllowedAddTask.
func (mr *MockI_UserServiceValidateMockRecorder) IsAllowedAddTask() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAllowedAddTask", reflect.TypeOf((*MockI_UserServiceValidate)(nil).IsAllowedAddTask))
}
