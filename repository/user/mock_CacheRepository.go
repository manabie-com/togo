// Code generated by mockery 2.9.4. DO NOT EDIT.

package user

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockCacheRepository is an autogenerated mock type for the CacheRepository type
type MockCacheRepository struct {
	mock.Mock
}

// GetTotalTodoByUserID provides a mock function with given fields: ctx, userID
func (_m *MockCacheRepository) GetTotalTodoByUserID(ctx context.Context, userID int64) (int, error) {
	ret := _m.Called(ctx, userID)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, int64) int); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetTotalTodo provides a mock function with given fields: ctx
func (_m *MockCacheRepository) ResetTotalTodo(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetTotalTodoByUserID provides a mock function with given fields: ctx, userID, totalRequest
func (_m *MockCacheRepository) SetTotalTodoByUserID(ctx context.Context, userID int64, totalRequest int) error {
	ret := _m.Called(ctx, userID, totalRequest)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int) error); ok {
		r0 = rf(ctx, userID, totalRequest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
