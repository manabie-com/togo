// Code generated by mockery v2.6.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/valonekowd/togo/domain/entity"

	mock "github.com/stretchr/testify/mock"

	response "github.com/valonekowd/togo/usecase/response"
)

// UserFormatterMock is an autogenerated mock type for the UserPresenter type
type UserFormatterMock struct {
	mock.Mock
}

// SignIn provides a mock function with given fields: ctx, u
func (_m *UserFormatterMock) SignIn(ctx context.Context, u *entity.User) (*response.SignIn, error) {
	ret := _m.Called(ctx, u)

	var r0 *response.SignIn
	if rf, ok := ret.Get(0).(func(context.Context, *entity.User) *response.SignIn); ok {
		r0 = rf(ctx, u)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.SignIn)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *entity.User) error); ok {
		r1 = rf(ctx, u)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SignUp provides a mock function with given fields: ctx, u
func (_m *UserFormatterMock) SignUp(ctx context.Context, u *entity.User) (*response.SignUp, error) {
	ret := _m.Called(ctx, u)

	var r0 *response.SignUp
	if rf, ok := ret.Get(0).(func(context.Context, *entity.User) *response.SignUp); ok {
		r0 = rf(ctx, u)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.SignUp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *entity.User) error); ok {
		r1 = rf(ctx, u)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
