package dynamodb

import (
	"context"
	"fmt"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/feature/dynamodb/attributevalue"
	"github.com/aws/aws-sdk-go-v2/service/dynamodb"
	"github.com/jssoriao/todo-go/storage"
)

func (s *Storage) CreateUser(user storage.User) (storage.User, error) {
	saveUserFunc := func(id string) error {
		// Assign the autogenerated id to the user
		user.ID = id

		// Add timestamps
		timestamp := time.Now()
		user.Created = timestamp
		user.Updated = timestamp

		item, err := attributevalue.MarshalMap(user)
		if err != nil {
			return fmt.Errorf("failed to marshal the user object to dynamodb format: %w", err)
		}
		if _, err := s.client.PutItem(context.Background(), &dynamodb.PutItemInput{
			TableName:           &usersTableName,
			Item:                item,
			ConditionExpression: aws.String("attribute_not_exists(id)"),
		}); err != nil {
			// TODO: Figure out how to handle dynamodb ConditionalCheckFailedException error for golang aws sdk v2
			return err
		}
		return nil
	}

	_, err := generateID(saveUserFunc, 21, 5, Alphanumeric)
	if err != nil {
		return storage.User{}, err
	}

	return user, nil
}

func (s *Storage) GetUser(id string) (*storage.User, error) {
	key, err := attributevalue.MarshalMap(map[string]string{
		"id": id,
	})
	if err != nil {
		return nil, fmt.Errorf("failed to marshal the user key to dynamodb format: %w", err)
	}
	resp, err := s.client.GetItem(context.Background(), &dynamodb.GetItemInput{
		TableName: &usersTableName,
		Key:       key,
	})
	if err != nil {
		return nil, err
	}
	if len(resp.Item) == 0 {
		return nil, nil
	}

	user := storage.User{}
	if err = attributevalue.UnmarshalMap(resp.Item, &user); err != nil {
		return nil, fmt.Errorf("failed to unmarshal dynamodb item to user struct: %w", err)
	}
	return &user, err
}
