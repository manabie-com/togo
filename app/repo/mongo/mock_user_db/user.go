// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/manabie-com/togo/app/repo/mongo/user (interfaces: Repository)

// Package mock_user_db is a generated GoMock package.
package mock_user_db

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/manabie-com/togo/app/model"
	user "github.com/manabie-com/togo/app/repo/mongo/user"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepository) Create(arg0 context.Context, arg1 user.CreateReq) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), arg0, arg1)
}

// GetOneByID mocks base method.
func (m *MockRepository) GetOneByID(arg0 context.Context, arg1 int) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneByID", arg0, arg1)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneByID indicates an expected call of GetOneByID.
func (mr *MockRepositoryMockRecorder) GetOneByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneByID", reflect.TypeOf((*MockRepository)(nil).GetOneByID), arg0, arg1)
}

// GetOneByUsername mocks base method.
func (m *MockRepository) GetOneByUsername(arg0 context.Context, arg1 string) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneByUsername", arg0, arg1)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneByUsername indicates an expected call of GetOneByUsername.
func (mr *MockRepositoryMockRecorder) GetOneByUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneByUsername", reflect.TypeOf((*MockRepository)(nil).GetOneByUsername), arg0, arg1)
}

// IncNumTask mocks base method.
func (m *MockRepository) IncNumTask(arg0 context.Context, arg1 user.IncNumTaskReq) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncNumTask", arg0, arg1)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IncNumTask indicates an expected call of IncNumTask.
func (mr *MockRepositoryMockRecorder) IncNumTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncNumTask", reflect.TypeOf((*MockRepository)(nil).IncNumTask), arg0, arg1)
}
