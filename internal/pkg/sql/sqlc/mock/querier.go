// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/sql/sqlc/query.go

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	db "github.com/dinhquockhanh/togo/internal/pkg/sql/sqlc"
	gomock "github.com/golang/mock/gomock"
)

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// AssignTask mocks base method.
func (m *MockQuerier) AssignTask(ctx context.Context, arg *db.AssignTaskParams) (*db.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignTask", ctx, arg)
	ret0, _ := ret[0].(*db.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignTask indicates an expected call of AssignTask.
func (mr *MockQuerierMockRecorder) AssignTask(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignTask", reflect.TypeOf((*MockQuerier)(nil).AssignTask), ctx, arg)
}

// CountTaskByAssigneeToday mocks base method.
func (m *MockQuerier) CountTaskByAssigneeToday(ctx context.Context, assignee sql.NullString) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountTaskByAssigneeToday", ctx, assignee)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountTaskByAssigneeToday indicates an expected call of CountTaskByAssigneeToday.
func (mr *MockQuerierMockRecorder) CountTaskByAssigneeToday(ctx, assignee interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountTaskByAssigneeToday", reflect.TypeOf((*MockQuerier)(nil).CountTaskByAssigneeToday), ctx, assignee)
}

// CreateLimit mocks base method.
func (m *MockQuerier) CreateLimit(ctx context.Context, arg *db.CreateLimitParams) (*db.Limit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLimit", ctx, arg)
	ret0, _ := ret[0].(*db.Limit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLimit indicates an expected call of CreateLimit.
func (mr *MockQuerierMockRecorder) CreateLimit(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLimit", reflect.TypeOf((*MockQuerier)(nil).CreateLimit), ctx, arg)
}

// CreateTask mocks base method.
func (m *MockQuerier) CreateTask(ctx context.Context, arg *db.CreateTaskParams) (*db.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", ctx, arg)
	ret0, _ := ret[0].(*db.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockQuerierMockRecorder) CreateTask(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockQuerier)(nil).CreateTask), ctx, arg)
}

// CreateTier mocks base method.
func (m *MockQuerier) CreateTier(ctx context.Context, arg *db.CreateTierParams) (*db.Tier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTier", ctx, arg)
	ret0, _ := ret[0].(*db.Tier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTier indicates an expected call of CreateTier.
func (mr *MockQuerierMockRecorder) CreateTier(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTier", reflect.TypeOf((*MockQuerier)(nil).CreateTier), ctx, arg)
}

// CreateUser mocks base method.
func (m *MockQuerier) CreateUser(ctx context.Context, arg *db.CreateUserParams) (*db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, arg)
	ret0, _ := ret[0].(*db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockQuerierMockRecorder) CreateUser(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockQuerier)(nil).CreateUser), ctx, arg)
}

// DeleteLimit mocks base method.
func (m *MockQuerier) DeleteLimit(ctx context.Context, arg *db.DeleteLimitParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLimit", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLimit indicates an expected call of DeleteLimit.
func (mr *MockQuerierMockRecorder) DeleteLimit(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLimit", reflect.TypeOf((*MockQuerier)(nil).DeleteLimit), ctx, arg)
}

// DeleteTask mocks base method.
func (m *MockQuerier) DeleteTask(ctx context.Context, id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTask", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTask indicates an expected call of DeleteTask.
func (mr *MockQuerierMockRecorder) DeleteTask(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockQuerier)(nil).DeleteTask), ctx, id)
}

// DeleteTier mocks base method.
func (m *MockQuerier) DeleteTier(ctx context.Context, id int16) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTier", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTier indicates an expected call of DeleteTier.
func (mr *MockQuerierMockRecorder) DeleteTier(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTier", reflect.TypeOf((*MockQuerier)(nil).DeleteTier), ctx, id)
}

// DeleteUser mocks base method.
func (m *MockQuerier) DeleteUser(ctx context.Context, username string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, username)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockQuerierMockRecorder) DeleteUser(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockQuerier)(nil).DeleteUser), ctx, username)
}

// GetLimit mocks base method.
func (m *MockQuerier) GetLimit(ctx context.Context, arg *db.GetLimitParams) (*db.Limit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLimit", ctx, arg)
	ret0, _ := ret[0].(*db.Limit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLimit indicates an expected call of GetLimit.
func (mr *MockQuerierMockRecorder) GetLimit(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLimit", reflect.TypeOf((*MockQuerier)(nil).GetLimit), ctx, arg)
}

// GetTask mocks base method.
func (m *MockQuerier) GetTask(ctx context.Context, id int32) (*db.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTask", ctx, id)
	ret0, _ := ret[0].(*db.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTask indicates an expected call of GetTask.
func (mr *MockQuerierMockRecorder) GetTask(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*MockQuerier)(nil).GetTask), ctx, id)
}

// GetTier mocks base method.
func (m *MockQuerier) GetTier(ctx context.Context, id int16) (*db.Tier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTier", ctx, id)
	ret0, _ := ret[0].(*db.Tier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTier indicates an expected call of GetTier.
func (mr *MockQuerierMockRecorder) GetTier(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTier", reflect.TypeOf((*MockQuerier)(nil).GetTier), ctx, id)
}

// GetUserByName mocks base method.
func (m *MockQuerier) GetUserByName(ctx context.Context, username string) (*db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByName", ctx, username)
	ret0, _ := ret[0].(*db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByName indicates an expected call of GetUserByName.
func (mr *MockQuerierMockRecorder) GetUserByName(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByName", reflect.TypeOf((*MockQuerier)(nil).GetUserByName), ctx, username)
}

// ListLimits mocks base method.
func (m *MockQuerier) ListLimits(ctx context.Context, arg *db.ListLimitsParams) ([]*db.Limit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLimits", ctx, arg)
	ret0, _ := ret[0].([]*db.Limit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLimits indicates an expected call of ListLimits.
func (mr *MockQuerierMockRecorder) ListLimits(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLimits", reflect.TypeOf((*MockQuerier)(nil).ListLimits), ctx, arg)
}

// ListTasks mocks base method.
func (m *MockQuerier) ListTasks(ctx context.Context, arg *db.ListTasksParams) ([]*db.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTasks", ctx, arg)
	ret0, _ := ret[0].([]*db.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTasks indicates an expected call of ListTasks.
func (mr *MockQuerierMockRecorder) ListTasks(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTasks", reflect.TypeOf((*MockQuerier)(nil).ListTasks), ctx, arg)
}

// ListTiers mocks base method.
func (m *MockQuerier) ListTiers(ctx context.Context, arg *db.ListTiersParams) ([]*db.Tier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTiers", ctx, arg)
	ret0, _ := ret[0].([]*db.Tier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTiers indicates an expected call of ListTiers.
func (mr *MockQuerierMockRecorder) ListTiers(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTiers", reflect.TypeOf((*MockQuerier)(nil).ListTiers), ctx, arg)
}

// ListUsers mocks base method.
func (m *MockQuerier) ListUsers(ctx context.Context, arg *db.ListUsersParams) ([]*db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", ctx, arg)
	ret0, _ := ret[0].([]*db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockQuerierMockRecorder) ListUsers(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockQuerier)(nil).ListUsers), ctx, arg)
}

// UpdateUserTier mocks base method.
func (m *MockQuerier) UpdateUserTier(ctx context.Context, arg *db.UpdateUserTierParams) (*db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserTier", ctx, arg)
	ret0, _ := ret[0].(*db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserTier indicates an expected call of UpdateUserTier.
func (mr *MockQuerierMockRecorder) UpdateUserTier(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserTier", reflect.TypeOf((*MockQuerier)(nil).UpdateUserTier), ctx, arg)
}
