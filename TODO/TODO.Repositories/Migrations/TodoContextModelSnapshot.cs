// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TODO.Repositories.Data;

namespace TODO.Repositories.Migrations
{
    [DbContext(typeof(TodoContext))]
    partial class TodoContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.14")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TODO.Repositories.Data.DBModels.Todo", b =>
                {
                    b.Property<int>("TodoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("TodoDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TodoName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TodoId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Todo");
                });

            modelBuilder.Entity("TODO.Repositories.Data.DBModels.TodoStatus", b =>
                {
                    b.Property<int>("TodoStatusId")
                        .HasColumnType("int");

                    b.Property<string>("StatusDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TodoStatusId");

                    b.ToTable("TodoStatus");

                    b.HasData(
                        new
                        {
                            TodoStatusId = 0,
                            StatusName = "TO DO"
                        },
                        new
                        {
                            TodoStatusId = 1,
                            StatusName = "DONE"
                        },
                        new
                        {
                            TodoStatusId = 2,
                            StatusName = "IN PROGRESS"
                        });
                });

            modelBuilder.Entity("TODO.Repositories.Data.DBModels.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            FirstName = "Michael",
                            LastName = "Jordan"
                        },
                        new
                        {
                            UserId = 2,
                            FirstName = "Isiah",
                            LastName = "Thomas"
                        });
                });

            modelBuilder.Entity("TODO.Repositories.Data.DBModels.UserTodoConfig", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("DailyTaskLimit")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.ToTable("UserTodoConfig");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            DailyTaskLimit = 10
                        },
                        new
                        {
                            UserId = 2,
                            DailyTaskLimit = 5
                        });
                });

            modelBuilder.Entity("TODO.Repositories.Data.DBModels.Todo", b =>
                {
                    b.HasOne("TODO.Repositories.Data.DBModels.TodoStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TODO.Repositories.Data.DBModels.User", null)
                        .WithMany("Todos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("TODO.Repositories.Data.DBModels.UserTodoConfig", b =>
                {
                    b.HasOne("TODO.Repositories.Data.DBModels.User", null)
                        .WithOne("UserTodoConfig")
                        .HasForeignKey("TODO.Repositories.Data.DBModels.UserTodoConfig", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TODO.Repositories.Data.DBModels.User", b =>
                {
                    b.Navigation("Todos");

                    b.Navigation("UserTodoConfig");
                });
#pragma warning restore 612, 618
        }
    }
}
