package postgres

import (
	"context"
	"database/sql"

	"github.com/manabie-com/togo/internal/storages"
	"github.com/stretchr/testify/mock"
)

// DBRepository is an autogenerated mock type for the db type
type DBRepository struct {
	mock.Mock
}

// CountTasks provides a mock function with given fields: ctx, userID, createdDate
func (_m *DBRepository) CountTasks(ctx context.Context, userID, createdDate sql.NullString) (int, error) {
	ret := _m.Called(ctx, userID, createdDate)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, sql.NullString, sql.NullString) int); ok {
		r0 = rf(ctx, userID, createdDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, sql.NullString, sql.NullString) error); ok {
		r1 = rf(ctx, userID, createdDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: ctx, userID
func (_m *DBRepository) GetUser(ctx context.Context, userID sql.NullString) (*storages.User, error) {
	ret := _m.Called(ctx, userID)

	var r0 *storages.User
	if rf, ok := ret.Get(0).(func(context.Context, sql.NullString) *storages.User); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storages.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, sql.NullString) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateUser provides a mock function with given fields: ctx, userID, pwd
func (_m *DBRepository) ValidateUser(ctx context.Context, userID, pwd sql.NullString) bool {
	ret := _m.Called(ctx, userID, pwd)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, sql.NullString, sql.NullString) bool); ok {
		r0 = rf(ctx, userID, pwd)
	} else {
		r0 = ret.Bool(0)
	}
	return r0
}

// RetrieveTasks provides a mock function with given fields: ctx, userID, createdDate
func (_m *DBRepository) RetrieveTasks(ctx context.Context, userID, createdDate sql.NullString) ([]*storages.Task, error) {
	ret := _m.Called(ctx, userID, createdDate)

	var r0 []*storages.Task
	if rf, ok := ret.Get(0).(func(context.Context, sql.NullString, sql.NullString) []*storages.Task); ok {
		r0 = rf(ctx, userID, createdDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*storages.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, sql.NullString, sql.NullString) error); ok {
		r1 = rf(ctx, userID, createdDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTasks provides a mock function with given fields: ctx, userID
func (_m *DBRepository) DeleteTasks(ctx context.Context, userID sql.NullString) error {
	ret := _m.Called(ctx, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.NullString) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddTask provides a mock function with given fields: ctx, task
func (_m *DBRepository) AddTask(ctx context.Context, task *storages.Task) error {
	ret := _m.Called(ctx, task)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *storages.Task) error); ok {
		r0 = rf(ctx, task)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
