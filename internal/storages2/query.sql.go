// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package storages2

import (
	"context"
)

const addTask = `-- name: AddTask :exec
INSERT INTO tasks (id, content, user_id, created_date) VALUES ($1, $2, $3, $4)
`

type AddTaskParams struct {
	ID          string `json:"id"`
	Content     string `json:"content"`
	UserID      string `json:"user_id"`
	CreatedDate string `json:"created_date"`
}

func (q *Queries) AddTask(ctx context.Context, arg AddTaskParams) error {
	_, err := q.db.ExecContext(ctx, addTask,
		arg.ID,
		arg.Content,
		arg.UserID,
		arg.CreatedDate,
	)
	return err
}

const countTaskPerDay = `-- name: CountTaskPerDay :one
SELECT COUNT(*) FROM tasks WHERE user_id = $1 AND created_date = $2
`

type CountTaskPerDayParams struct {
	UserID      string `json:"user_id"`
	CreatedDate string `json:"created_date"`
}

func (q *Queries) CountTaskPerDay(ctx context.Context, arg CountTaskPerDayParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, countTaskPerDay, arg.UserID, arg.CreatedDate)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getLimitPerUser = `-- name: GetLimitPerUser :one
SELECT max_todo FROM users WHERE id = $1
`

func (q *Queries) GetLimitPerUser(ctx context.Context, id string) (int32, error) {
	row := q.db.QueryRowContext(ctx, getLimitPerUser, id)
	var max_todo int32
	err := row.Scan(&max_todo)
	return max_todo, err
}

const retrieveTasks = `-- name: RetrieveTasks :many
SELECT id, content, user_id, created_date FROM tasks WHERE user_id = $1 AND created_date = $2
`

type RetrieveTasksParams struct {
	UserID      string `json:"user_id"`
	CreatedDate string `json:"created_date"`
}

func (q *Queries) RetrieveTasks(ctx context.Context, arg RetrieveTasksParams) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, retrieveTasks, arg.UserID, arg.CreatedDate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.UserID,
			&i.CreatedDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const validateUser = `-- name: ValidateUser :one
SELECT id FROM users WHERE id = $1 AND password = $2
`

type ValidateUserParams struct {
	ID       string `json:"id"`
	Password string `json:"password"`
}

func (q *Queries) ValidateUser(ctx context.Context, arg ValidateUserParams) (string, error) {
	row := q.db.QueryRowContext(ctx, validateUser, arg.ID, arg.Password)
	var id string
	err := row.Scan(&id)
	return id, err
}
