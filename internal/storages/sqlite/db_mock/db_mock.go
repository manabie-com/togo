// Code generated by MockGen. DO NOT EDIT.
// Source: db.go

// Package mock_sqllite is a generated GoMock package.
package mock_sqllite

import (
	context "context"
	sql "database/sql"
	gomock "github.com/golang/mock/gomock"
	storages "github.com/manabie-com/togo/internal/storages"
	reflect "reflect"
)

// MockDatabaser is a mock of Databaser interface
type MockDatabaser struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaserMockRecorder
}

// MockDatabaserMockRecorder is the mock recorder for MockDatabaser
type MockDatabaserMockRecorder struct {
	mock *MockDatabaser
}

// NewMockDatabaser creates a new mock instance
func NewMockDatabaser(ctrl *gomock.Controller) *MockDatabaser {
	mock := &MockDatabaser{ctrl: ctrl}
	mock.recorder = &MockDatabaserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDatabaser) EXPECT() *MockDatabaserMockRecorder {
	return m.recorder
}

// RetrieveTasks mocks base method
func (m *MockDatabaser) RetrieveTasks(ctx context.Context, userID, createdDate sql.NullString) ([]*storages.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveTasks", ctx, userID, createdDate)
	ret0, _ := ret[0].([]*storages.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveTasks indicates an expected call of RetrieveTasks
func (mr *MockDatabaserMockRecorder) RetrieveTasks(ctx, userID, createdDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveTasks", reflect.TypeOf((*MockDatabaser)(nil).RetrieveTasks), ctx, userID, createdDate)
}

// AddTask mocks base method
func (m *MockDatabaser) AddTask(ctx context.Context, t *storages.Task) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTask", ctx, t)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTask indicates an expected call of AddTask
func (mr *MockDatabaserMockRecorder) AddTask(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTask", reflect.TypeOf((*MockDatabaser)(nil).AddTask), ctx, t)
}

// ValidateUser mocks base method
func (m *MockDatabaser) ValidateUser(ctx context.Context, userID, pwd sql.NullString) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateUser", ctx, userID, pwd)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ValidateUser indicates an expected call of ValidateUser
func (mr *MockDatabaserMockRecorder) ValidateUser(ctx, userID, pwd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateUser", reflect.TypeOf((*MockDatabaser)(nil).ValidateUser), ctx, userID, pwd)
}
