// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	dto "togo/internal/task/dto"

	mock "github.com/stretchr/testify/mock"

	response "togo/internal/response"
)

// TaskService is an autogenerated mock type for the TaskService type
type TaskService struct {
	mock.Mock
}

// Create provides a mock function with given fields: createTaskDto, userID
func (_m *TaskService) Create(createTaskDto *dto.CreateTaskDto, userID int) (*response.TaskResponse, error) {
	ret := _m.Called(createTaskDto, userID)

	var r0 *response.TaskResponse
	if rf, ok := ret.Get(0).(func(*dto.CreateTaskDto, int) *response.TaskResponse); ok {
		r0 = rf(createTaskDto, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.TaskResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.CreateTaskDto, int) error); ok {
		r1 = rf(createTaskDto, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetListByUserID provides a mock function with given fields: userID
func (_m *TaskService) GetListByUserID(userID int) ([]*response.TaskResponse, error) {
	ret := _m.Called(userID)

	var r0 []*response.TaskResponse
	if rf, ok := ret.Get(0).(func(int) []*response.TaskResponse); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*response.TaskResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTaskService interface {
	mock.TestingT
	Cleanup(func())
}

// NewTaskService creates a new instance of TaskService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTaskService(t mockConstructorTestingTNewTaskService) *TaskService {
	mock := &TaskService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
