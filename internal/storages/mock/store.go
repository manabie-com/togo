// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jericogantuangco/togo/internal/storages/postgres (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	postgres "github.com/jericogantuangco/togo/internal/storages/postgres"
	reflect "reflect"
)

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateTask mocks base method
func (m *MockStore) CreateTask(arg0 context.Context, arg1 postgres.CreateTaskParams) (postgres.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", arg0, arg1)
	ret0, _ := ret[0].(postgres.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTask indicates an expected call of CreateTask
func (mr *MockStoreMockRecorder) CreateTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockStore)(nil).CreateTask), arg0, arg1)
}

// CreateUser mocks base method
func (m *MockStore) CreateUser(arg0 context.Context, arg1 postgres.CreateUserParams) (postgres.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(postgres.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// RetrieveTasks mocks base method
func (m *MockStore) RetrieveTasks(arg0 context.Context, arg1 postgres.RetrieveTasksParams) ([]postgres.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveTasks", arg0, arg1)
	ret0, _ := ret[0].([]postgres.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveTasks indicates an expected call of RetrieveTasks
func (mr *MockStoreMockRecorder) RetrieveTasks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveTasks", reflect.TypeOf((*MockStore)(nil).RetrieveTasks), arg0, arg1)
}

// RetrieveUser mocks base method
func (m *MockStore) RetrieveUser(arg0 context.Context, arg1 string) (postgres.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveUser", arg0, arg1)
	ret0, _ := ret[0].(postgres.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveUser indicates an expected call of RetrieveUser
func (mr *MockStoreMockRecorder) RetrieveUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveUser", reflect.TypeOf((*MockStore)(nil).RetrieveUser), arg0, arg1)
}
