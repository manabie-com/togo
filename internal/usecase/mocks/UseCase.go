// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/manabie-com/togo/internal/entities"
	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// UseCase is an autogenerated mock type for the UseCase type
type UseCase struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, id, date, task
func (_m *UseCase) Add(ctx context.Context, id string, date string, task *entities.Task) error {
	ret := _m.Called(ctx, id, date, task)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *entities.Task) error); ok {
		r0 = rf(ctx, id, date, task)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateToken provides a mock function with given fields: id, jwtKey
func (_m *UseCase) CreateToken(id string, jwtKey string) (string, error) {
	ret := _m.Called(id, jwtKey)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(id, jwtKey)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(id, jwtKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, id, createdAt
func (_m *UseCase) List(ctx context.Context, id string, createdAt string) ([]*entities.Task, error) {
	ret := _m.Called(ctx, id, createdAt)

	var r0 []*entities.Task
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []*entities.Task); ok {
		r0 = rf(ctx, id, createdAt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, id, createdAt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidToken provides a mock function with given fields: token, JWTKey
func (_m *UseCase) ValidToken(token string, JWTKey string) bool {
	ret := _m.Called(token, JWTKey)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(token, JWTKey)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Validate provides a mock function with given fields: ctx, user, password
func (_m *UseCase) Validate(ctx context.Context, user sql.NullString, password sql.NullString) bool {
	ret := _m.Called(ctx, user, password)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, sql.NullString, sql.NullString) bool); ok {
		r0 = rf(ctx, user, password)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}
