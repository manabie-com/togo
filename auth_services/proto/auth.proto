//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package auth_services;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
//import "validate/validate.proto";

option go_package = "./;auth_services";

service Auth {
	// login
	rpc Login(google.protobuf.Empty) returns (AuthResponse) {
		option (google.api.http) ={
		post: "/api/v2/auth/login"
		};
	}

	// create User
	rpc CreateUser(UserRequest) returns (UserResponse) {
		option (google.api.http) ={
		post: "/api/v2/auth/users"
		body: "*"
		};
	}

	// update user
	rpc UpdateUser(UserUpdateReq) returns (UserResponse) {
		option (google.api.http) ={
		patch: "/api/v2/auth/users/{user_id}"
		body: "*"
		};
	}

	// reset password requires admin
	rpc ResetPassword(ResetPasswdReq) returns (google.protobuf.Empty) {
		option (google.api.http) ={
			patch: "/api/v2/auth/users/{user_id}/reset"
			body: "*"
		};
	}

	// delete user
	rpc DeleteUser(UserDeleteReq) returns (google.protobuf.Empty) {
		option (google.api.http) ={
		delete: "/api/v2/auth/users/{user_id}"
		};
	}

	// delete user permanently
	rpc DeleteUserPermanently(UserDeleteReq) returns (google.protobuf.Empty) {
		option (google.api.http) ={
		delete: "/api/v2/auth/users/{user_id}/permanently"
		};
	}

	// change passord
	rpc ChangePassword(UserChangePasswdReq) returns (google.protobuf.Empty) {
		option (google.api.http) ={
		post: "/api/v2/auth/users/{user_id}/password"
		body: "*"
		};
    }

	// get list user ID
	rpc GetListUserID(google.protobuf.Empty) returns (ListUserIDRsp) {
		option (google.api.http) ={
		get: "/api/v2/auth/userids"
		};
	}

}

message DetailError {
	map<string,string> old = 1;
	map<string,string> new = 2;
	map<string,string> errors = 3;
}

message Update {
	map<string,string> from = 1;
	map<string,string> to = 2;
}

message AuthResponse {
	google.protobuf.Timestamp token_expires_at = 1;
	string id = 2;
	string name = 3;
	string user_name = 4;
	bool enabled = 5;
}

message SupportedRoles {
	repeated RoleDescription roles = 1;
}

message RoleDescription {
	string name = 1;
	string description = 2;
}

enum RoleType {
	unassign = 0;
	monitor = 1;
	operator = 2;
}

message UserRequest {
	string password = 1;
	string email = 2;
	string phone = 3;
	string name = 4;
	string user_name = 5;
	int32 number_task = 6;
	bool enabled = 7;
}

message UserResponse {
	string id = 1;
	string name = 2;
	string user_name = 3;
	string email = 4;
	string phone = 5;
	int32 number_task = 6;
	bool enabled = 7;
}

message UserUpdateReq {
	string user_id = 1;
	string user_name = 2;
	string email = 3;
	string phone = 4;
	int32 number_task = 5;
}

message ResetPasswdReq {
	string user_id = 1;
	string password = 2;
}

/* work around for passing true or false*/
message EnabledType {
	bool is_enabled = 2;
}

message UserDeleteReq {
	string user_id = 1;
}

message UserChangePasswdReq {
	string user_id = 1;
	string original_password = 2;
	string password = 3;
}

message ListUserIDRsp{
	repeated string user_id = 1;
}

