// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: user.sql

package db

import (
	"context"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    user_name,
    hashed_password,
    created_at,
    updated_at,
    maximum_task_in_day
) VALUES (
             $1, $2, $3, $4, $5
         ) RETURNING id, user_name, hashed_password, created_at, updated_at, maximum_task_in_day
`

type CreateUserParams struct {
	UserName         string    `json:"user_name"`
	HashedPassword   string    `json:"hashed_password"`
	CreatedAt        time.Time `json:"created_at"`
	UpdatedAt        time.Time `json:"updated_at"`
	MaximumTaskInDay int32     `json:"maximum_task_in_day"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.UserName,
		arg.HashedPassword,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.MaximumTaskInDay,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserName,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.MaximumTaskInDay,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, user_name, hashed_password, created_at, updated_at, maximum_task_in_day FROM users
WHERE user_name = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, userName string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, userName)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserName,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.MaximumTaskInDay,
	)
	return i, err
}
