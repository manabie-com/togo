// Code generated by MockGen. DO NOT EDIT.
// Source: togo/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"
	db "togo/db/sqlc"

	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CountTasksCreatedToday mocks base method.
func (m *MockStore) CountTasksCreatedToday(arg0 context.Context, arg1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountTasksCreatedToday", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountTasksCreatedToday indicates an expected call of CountTasksCreatedToday.
func (mr *MockStoreMockRecorder) CountTasksCreatedToday(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountTasksCreatedToday", reflect.TypeOf((*MockStore)(nil).CountTasksCreatedToday), arg0, arg1)
}

// CreateTask mocks base method.
func (m *MockStore) CreateTask(arg0 context.Context, arg1 db.CreateTaskParams) (db.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", arg0, arg1)
	ret0, _ := ret[0].(db.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockStoreMockRecorder) CreateTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockStore)(nil).CreateTask), arg0, arg1)
}

// CreateTaskTx mocks base method.
func (m *MockStore) CreateTaskTx(arg0 context.Context, arg1 db.CreateTaskTxParams) (db.CreateTaskTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTaskTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateTaskTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTaskTx indicates an expected call of CreateTaskTx.
func (mr *MockStoreMockRecorder) CreateTaskTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTaskTx", reflect.TypeOf((*MockStore)(nil).CreateTaskTx), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// DeleteTaskByName mocks base method.
func (m *MockStore) DeleteTaskByName(arg0 context.Context, arg1 db.DeleteTaskByNameParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTaskByName", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTaskByName indicates an expected call of DeleteTaskByName.
func (mr *MockStoreMockRecorder) DeleteTaskByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTaskByName", reflect.TypeOf((*MockStore)(nil).DeleteTaskByName), arg0, arg1)
}

// GetTask mocks base method.
func (m *MockStore) GetTask(arg0 context.Context, arg1 int64) (db.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTask", arg0, arg1)
	ret0, _ := ret[0].(db.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTask indicates an expected call of GetTask.
func (mr *MockStoreMockRecorder) GetTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*MockStore)(nil).GetTask), arg0, arg1)
}

// GetTaskByName mocks base method.
func (m *MockStore) GetTaskByName(arg0 context.Context, arg1 db.GetTaskByNameParams) (db.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskByName", arg0, arg1)
	ret0, _ := ret[0].(db.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskByName indicates an expected call of GetTaskByName.
func (mr *MockStoreMockRecorder) GetTaskByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskByName", reflect.TypeOf((*MockStore)(nil).GetTaskByName), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), arg0, arg1)
}

// ListTasksByOwner mocks base method.
func (m *MockStore) ListTasksByOwner(arg0 context.Context, arg1 db.ListTasksByOwnerParams) ([]db.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTasksByOwner", arg0, arg1)
	ret0, _ := ret[0].([]db.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTasksByOwner indicates an expected call of ListTasksByOwner.
func (mr *MockStoreMockRecorder) ListTasksByOwner(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTasksByOwner", reflect.TypeOf((*MockStore)(nil).ListTasksByOwner), arg0, arg1)
}

// ListUsers mocks base method.
func (m *MockStore) ListUsers(arg0 context.Context, arg1 db.ListUsersParams) ([]db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", arg0, arg1)
	ret0, _ := ret[0].([]db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockStoreMockRecorder) ListUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockStore)(nil).ListUsers), arg0, arg1)
}

// UpdateTaskByName mocks base method.
func (m *MockStore) UpdateTaskByName(arg0 context.Context, arg1 db.UpdateTaskByNameParams) (db.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTaskByName", arg0, arg1)
	ret0, _ := ret[0].(db.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTaskByName indicates an expected call of UpdateTaskByName.
func (mr *MockStoreMockRecorder) UpdateTaskByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTaskByName", reflect.TypeOf((*MockStore)(nil).UpdateTaskByName), arg0, arg1)
}

// UpdateUserDailyCap mocks base method.
func (m *MockStore) UpdateUserDailyCap(arg0 context.Context, arg1 db.UpdateUserDailyCapParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserDailyCap", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserDailyCap indicates an expected call of UpdateUserDailyCap.
func (mr *MockStoreMockRecorder) UpdateUserDailyCap(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserDailyCap", reflect.TypeOf((*MockStore)(nil).UpdateUserDailyCap), arg0, arg1)
}

// UpdateUserDailyQuantity mocks base method.
func (m *MockStore) UpdateUserDailyQuantity(arg0 context.Context, arg1 db.UpdateUserDailyQuantityParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserDailyQuantity", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserDailyQuantity indicates an expected call of UpdateUserDailyQuantity.
func (mr *MockStoreMockRecorder) UpdateUserDailyQuantity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserDailyQuantity", reflect.TypeOf((*MockStore)(nil).UpdateUserDailyQuantity), arg0, arg1)
}
