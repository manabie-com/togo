// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: task.sql

package db

import (
	"context"
	"time"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (
    title,
    user_id,
    created_at,
    updated_at
) VALUES (
             $1, $2, $3, $4
         ) RETURNING id, title, user_id, created_at, updated_at
`

type CreateTaskParams struct {
	Title     string    `json:"title"`
	UserID    int32     `json:"user_id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createTask,
		arg.Title,
		arg.UserID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTask = `-- name: GetTask :one
SELECT id, title, user_id, created_at, updated_at FROM tasks
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTask(ctx context.Context, id int32) (Task, error) {
	row := q.db.QueryRowContext(ctx, getTask, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const selectTaskByUserId = `-- name: SelectTaskByUserId :many
SELECT t.title, t.user_id, t.created_at, t.updated_at FROM tasks t
INNER JOIN  users u
ON t.user_id = u.id
WHERE u.id = $1 LIMIT 1
`

type SelectTaskByUserIdRow struct {
	Title     string    `json:"title"`
	UserID    int32     `json:"user_id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) SelectTaskByUserId(ctx context.Context, id int32) ([]SelectTaskByUserIdRow, error) {
	rows, err := q.db.QueryContext(ctx, selectTaskByUserId, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SelectTaskByUserIdRow{}
	for rows.Next() {
		var i SelectTaskByUserIdRow
		if err := rows.Scan(
			&i.Title,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
