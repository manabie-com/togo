// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: todo.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on ToDoEntry with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ToDoEntry) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetContent()) < 1 {
		return ToDoEntryValidationError{
			field:  "Content",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// ToDoEntryValidationError is the validation error returned by
// ToDoEntry.Validate if the designated constraints aren't met.
type ToDoEntryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ToDoEntryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ToDoEntryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ToDoEntryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ToDoEntryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ToDoEntryValidationError) ErrorName() string { return "ToDoEntryValidationError" }

// Error satisfies the builtin error interface
func (e ToDoEntryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sToDoEntry.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ToDoEntryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ToDoEntryValidationError{}

// Validate checks the field values on AddToDoListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddToDoListRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		return AddToDoListRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
	}

	if len(m.GetEntry()) < 1 {
		return AddToDoListRequestValidationError{
			field:  "Entry",
			reason: "value must contain at least 1 item(s)",
		}
	}

	for idx, item := range m.GetEntry() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddToDoListRequestValidationError{
					field:  fmt.Sprintf("Entry[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// AddToDoListRequestValidationError is the validation error returned by
// AddToDoListRequest.Validate if the designated constraints aren't met.
type AddToDoListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddToDoListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddToDoListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddToDoListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddToDoListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddToDoListRequestValidationError) ErrorName() string {
	return "AddToDoListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddToDoListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddToDoListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddToDoListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddToDoListRequestValidationError{}

// Validate checks the field values on AddToDoListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddToDoListResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Message

	return nil
}

// AddToDoListResponseValidationError is the validation error returned by
// AddToDoListResponse.Validate if the designated constraints aren't met.
type AddToDoListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddToDoListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddToDoListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddToDoListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddToDoListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddToDoListResponseValidationError) ErrorName() string {
	return "AddToDoListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddToDoListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddToDoListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddToDoListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddToDoListResponseValidationError{}
