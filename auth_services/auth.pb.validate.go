// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/auth.proto

package auth_services

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _auth_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on DetailError with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *DetailError) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Old

	// no validation rules for New

	// no validation rules for Errors

	return nil
}

// DetailErrorValidationError is the validation error returned by
// DetailError.Validate if the designated constraints aren't met.
type DetailErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DetailErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DetailErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DetailErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DetailErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DetailErrorValidationError) ErrorName() string { return "DetailErrorValidationError" }

// Error satisfies the builtin error interface
func (e DetailErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDetailError.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DetailErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DetailErrorValidationError{}

// Validate checks the field values on Update with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Update) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for From

	// no validation rules for To

	return nil
}

// UpdateValidationError is the validation error returned by Update.Validate if
// the designated constraints aren't met.
type UpdateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateValidationError) ErrorName() string { return "UpdateValidationError" }

// Error satisfies the builtin error interface
func (e UpdateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateValidationError{}

// Validate checks the field values on AuthResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *AuthResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetTokenExpiresAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthResponseValidationError{
				field:  "TokenExpiresAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for UserName

	// no validation rules for Enabled

	return nil
}

// AuthResponseValidationError is the validation error returned by
// AuthResponse.Validate if the designated constraints aren't met.
type AuthResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthResponseValidationError) ErrorName() string { return "AuthResponseValidationError" }

// Error satisfies the builtin error interface
func (e AuthResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthResponseValidationError{}

// Validate checks the field values on SupportedRoles with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SupportedRoles) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SupportedRolesValidationError{
					field:  fmt.Sprintf("Roles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// SupportedRolesValidationError is the validation error returned by
// SupportedRoles.Validate if the designated constraints aren't met.
type SupportedRolesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SupportedRolesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SupportedRolesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SupportedRolesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SupportedRolesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SupportedRolesValidationError) ErrorName() string { return "SupportedRolesValidationError" }

// Error satisfies the builtin error interface
func (e SupportedRolesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSupportedRoles.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SupportedRolesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SupportedRolesValidationError{}

// Validate checks the field values on RoleDescription with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RoleDescription) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Description

	return nil
}

// RoleDescriptionValidationError is the validation error returned by
// RoleDescription.Validate if the designated constraints aren't met.
type RoleDescriptionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleDescriptionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleDescriptionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleDescriptionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleDescriptionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleDescriptionValidationError) ErrorName() string { return "RoleDescriptionValidationError" }

// Error satisfies the builtin error interface
func (e RoleDescriptionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleDescription.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleDescriptionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleDescriptionValidationError{}

// Validate checks the field values on UserRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UserRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Password

	// no validation rules for Email

	// no validation rules for Phone

	// no validation rules for Name

	// no validation rules for UserName

	// no validation rules for NumberTask

	// no validation rules for Enabled

	return nil
}

// UserRequestValidationError is the validation error returned by
// UserRequest.Validate if the designated constraints aren't met.
type UserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserRequestValidationError) ErrorName() string { return "UserRequestValidationError" }

// Error satisfies the builtin error interface
func (e UserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserRequestValidationError{}

// Validate checks the field values on UserResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UserResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for UserName

	// no validation rules for Email

	// no validation rules for Phone

	// no validation rules for NumberTask

	// no validation rules for Enabled

	return nil
}

// UserResponseValidationError is the validation error returned by
// UserResponse.Validate if the designated constraints aren't met.
type UserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserResponseValidationError) ErrorName() string { return "UserResponseValidationError" }

// Error satisfies the builtin error interface
func (e UserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserResponseValidationError{}

// Validate checks the field values on UserUpdateReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UserUpdateReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for UserName

	// no validation rules for Email

	// no validation rules for Phone

	// no validation rules for NumberTask

	return nil
}

// UserUpdateReqValidationError is the validation error returned by
// UserUpdateReq.Validate if the designated constraints aren't met.
type UserUpdateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserUpdateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserUpdateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserUpdateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserUpdateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserUpdateReqValidationError) ErrorName() string { return "UserUpdateReqValidationError" }

// Error satisfies the builtin error interface
func (e UserUpdateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserUpdateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserUpdateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserUpdateReqValidationError{}

// Validate checks the field values on ResetPasswdReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ResetPasswdReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for Password

	return nil
}

// ResetPasswdReqValidationError is the validation error returned by
// ResetPasswdReq.Validate if the designated constraints aren't met.
type ResetPasswdReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetPasswdReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetPasswdReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetPasswdReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetPasswdReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetPasswdReqValidationError) ErrorName() string { return "ResetPasswdReqValidationError" }

// Error satisfies the builtin error interface
func (e ResetPasswdReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetPasswdReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetPasswdReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetPasswdReqValidationError{}

// Validate checks the field values on EnabledType with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *EnabledType) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for IsEnabled

	return nil
}

// EnabledTypeValidationError is the validation error returned by
// EnabledType.Validate if the designated constraints aren't met.
type EnabledTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnabledTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnabledTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnabledTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnabledTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnabledTypeValidationError) ErrorName() string { return "EnabledTypeValidationError" }

// Error satisfies the builtin error interface
func (e EnabledTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnabledType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnabledTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnabledTypeValidationError{}

// Validate checks the field values on UserDeleteReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UserDeleteReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	return nil
}

// UserDeleteReqValidationError is the validation error returned by
// UserDeleteReq.Validate if the designated constraints aren't met.
type UserDeleteReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserDeleteReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserDeleteReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserDeleteReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserDeleteReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserDeleteReqValidationError) ErrorName() string { return "UserDeleteReqValidationError" }

// Error satisfies the builtin error interface
func (e UserDeleteReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserDeleteReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserDeleteReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserDeleteReqValidationError{}

// Validate checks the field values on UserChangePasswdReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UserChangePasswdReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for OriginalPassword

	// no validation rules for Password

	return nil
}

// UserChangePasswdReqValidationError is the validation error returned by
// UserChangePasswdReq.Validate if the designated constraints aren't met.
type UserChangePasswdReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserChangePasswdReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserChangePasswdReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserChangePasswdReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserChangePasswdReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserChangePasswdReqValidationError) ErrorName() string {
	return "UserChangePasswdReqValidationError"
}

// Error satisfies the builtin error interface
func (e UserChangePasswdReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserChangePasswdReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserChangePasswdReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserChangePasswdReqValidationError{}

// Validate checks the field values on ListUserIDRsp with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ListUserIDRsp) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListUserIDRspValidationError is the validation error returned by
// ListUserIDRsp.Validate if the designated constraints aren't met.
type ListUserIDRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserIDRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserIDRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserIDRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserIDRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserIDRspValidationError) ErrorName() string { return "ListUserIDRspValidationError" }

// Error satisfies the builtin error interface
func (e ListUserIDRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserIDRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserIDRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserIDRspValidationError{}
