// Code generated by mockery 2.9.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	tools "github.com/manabie-com/togo/internal/tools"
)

// IQuotaRepo is an autogenerated mock type for the IQuotaRepo type
type IQuotaRepo struct {
	mock.Mock
}

// CountTaskPerDay provides a mock function with given fields: ctx, userID, dateStr
func (_m *IQuotaRepo) CountTaskPerDay(ctx context.Context, userID string, dateStr string) (int, *tools.TodoError) {
	ret := _m.Called(ctx, userID, dateStr)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, string, string) int); ok {
		r0 = rf(ctx, userID, dateStr)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 *tools.TodoError
	if rf, ok := ret.Get(1).(func(context.Context, string, string) *tools.TodoError); ok {
		r1 = rf(ctx, userID, dateStr)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*tools.TodoError)
		}
	}

	return r0, r1
}

// GetLimitPerUser provides a mock function with given fields: ctx, userID
func (_m *IQuotaRepo) GetLimitPerUser(ctx context.Context, userID string) (int, *tools.TodoError) {
	ret := _m.Called(ctx, userID)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 *tools.TodoError
	if rf, ok := ret.Get(1).(func(context.Context, string) *tools.TodoError); ok {
		r1 = rf(ctx, userID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*tools.TodoError)
		}
	}

	return r0, r1
}
