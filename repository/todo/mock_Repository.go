// Code generated by mockery 2.9.4. DO NOT EDIT.

package todo

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	codetype "github.com/khangjig/togo/codetype"
	model "github.com/khangjig/togo/model"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, todo
func (_m *MockRepository) Create(ctx context.Context, todo *model.Todo) error {
	ret := _m.Called(ctx, todo)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Todo) error); ok {
		r0 = rf(ctx, todo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByID provides a mock function with given fields: ctx, id, unscoped
func (_m *MockRepository) DeleteByID(ctx context.Context, id int64, unscoped bool) error {
	ret := _m.Called(ctx, id, unscoped)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, bool) error); ok {
		r0 = rf(ctx, id, unscoped)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *MockRepository) GetByID(ctx context.Context, id int64) (*model.Todo, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.Todo
	if rf, ok := ret.Get(0).(func(context.Context, int64) *model.Todo); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Todo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetList provides a mock function with given fields: ctx, userID, conditions, search, order, paginator
func (_m *MockRepository) GetList(ctx context.Context, userID int64, conditions interface{}, search string, order string, paginator codetype.Paginator) ([]model.Todo, int64, error) {
	ret := _m.Called(ctx, userID, conditions, search, order, paginator)

	var r0 []model.Todo
	if rf, ok := ret.Get(0).(func(context.Context, int64, interface{}, string, string, codetype.Paginator) []model.Todo); ok {
		r0 = rf(ctx, userID, conditions, search, order, paginator)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Todo)
		}
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(context.Context, int64, interface{}, string, string, codetype.Paginator) int64); ok {
		r1 = rf(ctx, userID, conditions, search, order, paginator)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, int64, interface{}, string, string, codetype.Paginator) error); ok {
		r2 = rf(ctx, userID, conditions, search, order, paginator)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Update provides a mock function with given fields: ctx, todo
func (_m *MockRepository) Update(ctx context.Context, todo *model.Todo) error {
	ret := _m.Called(ctx, todo)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Todo) error); ok {
		r0 = rf(ctx, todo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
