// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/manabie-com/backend/controller/tasks (interfaces: I_TaskController)

// Package mock_tasks is a generated GoMock package.
package mock_tasks

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockI_TaskController is a mock of I_TaskController interface.
type MockI_TaskController struct {
	ctrl     *gomock.Controller
	recorder *MockI_TaskControllerMockRecorder
}

// MockI_TaskControllerMockRecorder is the mock recorder for MockI_TaskController.
type MockI_TaskControllerMockRecorder struct {
	mock *MockI_TaskController
}

// NewMockI_TaskController creates a new mock instance.
func NewMockI_TaskController(ctrl *gomock.Controller) *MockI_TaskController {
	mock := &MockI_TaskController{ctrl: ctrl}
	mock.recorder = &MockI_TaskControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockI_TaskController) EXPECT() *MockI_TaskControllerMockRecorder {
	return m.recorder
}

// CreateTask mocks base method.
func (m *MockI_TaskController) CreateTask(arg0 *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateTask", arg0)
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockI_TaskControllerMockRecorder) CreateTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockI_TaskController)(nil).CreateTask), arg0)
}

// DeleteTask mocks base method.
func (m *MockI_TaskController) DeleteTask(arg0 *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteTask", arg0)
}

// DeleteTask indicates an expected call of DeleteTask.
func (mr *MockI_TaskControllerMockRecorder) DeleteTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockI_TaskController)(nil).DeleteTask), arg0)
}

// GetTaskAll mocks base method.
func (m *MockI_TaskController) GetTaskAll(arg0 *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetTaskAll", arg0)
}

// GetTaskAll indicates an expected call of GetTaskAll.
func (mr *MockI_TaskControllerMockRecorder) GetTaskAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskAll", reflect.TypeOf((*MockI_TaskController)(nil).GetTaskAll), arg0)
}

// UpdateTask mocks base method.
func (m *MockI_TaskController) UpdateTask(arg0 *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateTask", arg0)
}

// UpdateTask indicates an expected call of UpdateTask.
func (mr *MockI_TaskControllerMockRecorder) UpdateTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTask", reflect.TypeOf((*MockI_TaskController)(nil).UpdateTask), arg0)
}
