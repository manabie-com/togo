// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	models "togo/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// TaskRepository is an autogenerated mock type for the TaskRepository type
type TaskRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: task
func (_m *TaskRepository) Create(task *models.Task) (*models.Task, error) {
	ret := _m.Called(task)

	var r0 *models.Task
	if rf, ok := ret.Get(0).(func(*models.Task) *models.Task); ok {
		r0 = rf(task)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.Task) error); ok {
		r1 = rf(task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: taskID
func (_m *TaskRepository) GetByID(taskID int) (*models.Task, error) {
	ret := _m.Called(taskID)

	var r0 *models.Task
	if rf, ok := ret.Get(0).(func(int) *models.Task); ok {
		r0 = rf(taskID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(taskID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetListByUserID provides a mock function with given fields: userID
func (_m *TaskRepository) GetListByUserID(userID int) ([]*models.Task, error) {
	ret := _m.Called(userID)

	var r0 []*models.Task
	if rf, ok := ret.Get(0).(func(int) []*models.Task); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNumberOfUserTaskOnToday provides a mock function with given fields: userID
func (_m *TaskRepository) GetNumberOfUserTaskOnToday(userID int) (int, error) {
	ret := _m.Called(userID)

	var r0 int
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTaskRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewTaskRepository creates a new instance of TaskRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTaskRepository(t mockConstructorTestingTNewTaskRepository) *TaskRepository {
	mock := &TaskRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
