// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: tier.sql

package db

import (
	"context"
)

const createTier = `-- name: CreateTier :one
insert into tiers
(id, name, description)
values ($1, $2, $3)
returning id, name, description
`

type CreateTierParams struct {
	ID          int16  `json:"id"`
	Name        string `json:"name"`
	Description string `json:"description"`
}

func (q *Queries) CreateTier(ctx context.Context, arg *CreateTierParams) (*Tier, error) {
	row := q.queryRow(ctx, q.createTierStmt, createTier, arg.ID, arg.Name, arg.Description)
	var i Tier
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return &i, err
}

const deleteTier = `-- name: DeleteTier :exec
delete from tiers where id = $1
`

func (q *Queries) DeleteTier(ctx context.Context, id int16) error {
	_, err := q.exec(ctx, q.deleteTierStmt, deleteTier, id)
	return err
}

const getTier = `-- name: GetTier :one
select id, name, description
from tiers
where id = $1
limit 1
`

func (q *Queries) GetTier(ctx context.Context, id int16) (*Tier, error) {
	row := q.queryRow(ctx, q.getTierStmt, getTier, id)
	var i Tier
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return &i, err
}

const listTiers = `-- name: ListTiers :many
select id, name, description
from tiers
order by name
limit $1 offset $2
`

type ListTiersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTiers(ctx context.Context, arg *ListTiersParams) ([]*Tier, error) {
	rows, err := q.query(ctx, q.listTiersStmt, listTiers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Tier{}
	for rows.Next() {
		var i Tier
		if err := rows.Scan(&i.ID, &i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
