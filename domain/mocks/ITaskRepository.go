// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	domain "togo/domain"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// ITaskRepository is an autogenerated mock type for the ITaskRepository type
type ITaskRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: task
func (_m *ITaskRepository) Create(task domain.Task) (domain.Task, error) {
	ret := _m.Called(task)

	var r0 domain.Task
	if rf, ok := ret.Get(0).(func(domain.Task) domain.Task); ok {
		r0 = rf(task)
	} else {
		r0 = ret.Get(0).(domain.Task)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Task) error); ok {
		r1 = rf(task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetTx provides a mock function with given fields: tx
func (_m *ITaskRepository) SetTx(tx *gorm.DB) *gorm.DB {
	ret := _m.Called(tx)

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func(*gorm.DB) *gorm.DB); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// Update provides a mock function with given fields: task
func (_m *ITaskRepository) Update(task domain.Task) error {
	ret := _m.Called(task)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.Task) error); ok {
		r0 = rf(task)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewITaskRepository creates a new instance of ITaskRepository. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewITaskRepository(t testing.TB) *ITaskRepository {
	mock := &ITaskRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
